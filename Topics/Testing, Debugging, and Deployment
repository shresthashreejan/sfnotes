- Only Developer Edition or Partner Developer Edition environments can create managed packages.
- Debug logs do not include details related to JavaScript events.
- Debug log generation can be prevented by setting the Debug Log Levels to NONE.
- runAs() ignores user license limits. New users can be created with runAs() even if the organization has no additional user licenses.
- Test methods can only access custom object or custom setting records that they create.
- Developer sandbox has a storage limit of 200 MB, whereas Developer Pro sandbox has 1 GB.
- Change sets and unmanaged packages cannot be used to delete components.
- Apex test classes and specific test methods can be executed in the Developer Console, Setup, Visual Studio Code, Code Builder, and SOAP API.
- The DevOps Center, which is a managed package that can be installed from Setup, is a centralized platform that can be used to manage test and deployment processes between orgs in a release pipeline. To enab le the tracking of changes made to org metadata, it is integrated with Github and requires a Github account.
- A Developer Hub is the main org that is used to create and manage scratch orgs via Salesforce CLI commands.
- A SOQL query on the CronTrigger object can be used to obtain information about scheduled jobs.
- Developers can use a Partner Developer Edition org to manage all the source code and a Developer edition org to create a package and distribute it to AppExchange.
- Developer Pro and Partial Copy sandbox orgs cannot be used to publish apps in AppExchange.
- The debug log does not include information from actions triggered by time-based workflows.
- Partial Copy sandbox is used for quality assurance tasks such as user acceptance testing, integration testing, and training.
- Full sandbox is a replica of the production org, which supports performance testing, load testing, and staging.
- To create test data from files using static resources, add the data to a CSV file, create a static resource for it, and call Test.loadData() in the test method with the sObject type and resource name.
- When an org runs on API version 33.0 or earlier, all local tests will be run if the deployment includes components for the following metadata types: ApexClass, ApexComponent, ApexPage, ApexTrigger, ArticleType, BaseSharingRule, CriteriaBasedSharingRule, CustomDataType, CustomField, CustomObject, DataCategoryGroup, Flow, InstalledPackage, NamedFilter, OwnerSharingRule, PermissionSet, Profile, Queue, RecordType, RemoteSiteSetting, Role, SharingReason, Territory, Validation Rules & Workflow.
- However, for API version 34.0 and above, no tests are run by default if the package does not contain any Apex class or trigger.
- The FlowTestCoverage object is used to calculate flow test coverage in an org and is not used for testing flows.
- 'Apex Test Execution' page in setup and 'New Run' menu item in the developer console has an option to skip code coverage in a salesforce org.
- Objects that are used to manage the organization or metadata objects can be accessed by test methods such as User, Profile, Organization, RecordType, and more.
- Users generated by the runAs() method do not require additional user licenses as the method ignores user license limits.
- The AssertisNotNull() throws an assertion failure if the parameter provided is null. The Assert.areEqual() throws an assertion failure if the two parameters provided do not equal each other.
- Apex test classes cannot send outbound emails nor perform callouts.
- Apex test classes can perform single and bulk actions.
- Code coverage is not available from the Apex Test Execution page.
- Test classes selected in Apex Test Execution page are placed in the Apex Job queue and, by default, will run in parallel.
- Any changes to the records created in the @testSetup method are rolled back after each test method finishes execution.
- The suite manager cannot be used to skip code coverage.
- runAs() method can be used with existing users or a new user.
- The runAs() method does not enforce user permissions or field-level permissions, only record sharing.
- Any code that executes after the call to Test.startTest() and before Test.stopTest() is assigned a new set of governor limits which will ignore any DML or queries done outside of the start and stop testing.
- The Test.startTest() and Test.stopTest() methods can be used with the Limits methods (such as Limits.getDmiStatements(), Limits.getQueries(), etc) to determine the amount of governed resources that have been consumed in a specific block of code.
- The getStandardPricebookld() method returns the Id of the standard price book in the organization regardless of whether the test can query organization data.
- When running a subset of tests, code coverage is calculated individually for each class and trigger that is part of the deployment package. This means that each Apex class or trigger must individually meet the 75% coverage requirement. This coverage percentage is different from the overall coverage percentage for the entire code base.
- The quick deploy option will only appear if a change set, regardless of how many components it contains, has successfully passed a validation.
- The Developer Console runs tests asynchronously by default.
- Tests are run synchronously only when there is only one test class being run and the 'Always Run Asynchronously' option is not checked. If multiple test classes are run, then the tests will always run asynchronously regardless of the option.