- Although loading files via <script> tags are allowed in Visualforce pages, Salesforce recommends uploading the js files, or file archives, as static resources, and then referencing them using <apex:includescript> tags.
- <apex:include> tag is used for inserting a full Visualforce page into another page.
- Setter method pass user specified values from page markup to a controller.
- Rendering a dynamic number of records in a standard list controller is accomplished by setting the {!PageSize} with an element that can set variables, such as an <apex:selectList>.
- Existing list view filters can be applied to standard list controllers using the {!listviewOptions} and {!filterId} variables.
- Unlike standard controllers, custom controllers run in system mode by default, unless the 'with sharing' keywords are specified.
- The supported action methods in a standard controller are Save, QuickSave, Edit, Delete, Cancel and List.
- A CSS stylesheet can be referenced in Visualforce pages by using the <apex:stylesheet> component.
- The <apex:relatedList> tag will automatically generate a list of related records by specifying the relationship name in its list attribute. Example: <apex:relatedList list='Contacts'/>
- The getCompleteResult() method can be used to determine whether there are more records than the maximum record limit, which is 10000 records. It returns false if the controller won't be able to process all the returned records.
- In order to add a Visualforce page to an object's page layout, the object's standard controller must be used.
- In order to execute custom operations using Apex on Visualforce page with a standard controller, a controller extension must be used. The constructor of the controller extension must accept the standard controller object as a parameter, which is of type ApexPages.StandardController.
- A Visualforce page that uses a custom controller cannot be added to a page layout.
- Access to web service methods is only checked at the entry point. If access is allowed to the web service, all subsequent code will execute in system mode.
- The <apex:detail> Visualforce component is used to display the standard detail page of a particular object, as defined by the associated page layout for the object in setup.
- The <apex:dataList> component is used for iterating over a list of values.
- Standard Controller is not capable of updating field values on the parent record.
- The <apex:outputField> component can be used to display individual fields from a record.
- Instantiating a StandardSetController with a list of more than 10000 records doesn't throw an exception. Instead, the record list is truncated to the allowable limit.
- Instantiating a StandardSetController using a query locator returning more than 10000 records causes a LimitException to be thrown.
- View state in a Visualforce page, is automatically created and holds the state of the page such as data that includes the components, field values, and controller state.
- <script> tag, which is supported in Visualforce, can be used to embed client-side scripts such as js code.
- Apex classes containing web service methods must be defined as global, which will allow the class to be used anywhere in the org, including Apex code that belongs to other packages.
- Methods that perform DML statements or web service callouts can use the @future annotation.
- Merge field syntax can be used to retrieve data from related records. A developer can traverse up to five levels of child-to-parent relationships.
- When working with Visualforce controllers, primitive types such as strings are passed by value to a controller, while non-primitive types such as lists are passed by reference.
- StandardSetController is an Apex class that can be used to perform or extend the functionality available in standard Visualforce page list controllers.
- If a query locator is used for instantiating the StandardSetController to return more than 10000 records, then a LimitException will be thrown. However, instantiating StandardSetController with a list of more than 10000 records will not throw an exception, and instead trims the records down to the limit.
- A standard controller is designed for working on one primary record at a time.
- Standard list controllers allow developers to create Visualforce pages that can display or act on a set of records.
- Standard list controllers can be represented just by adding recordSetVar tag on <apex:page>.
- Constructors used by Visualforce custom controllers cannot include parameters or an explicit return type.
- Custom controllers run Visualforce pages in system mode.
- A custom controller runs in system mode by default, but the 'with sharing' keyword can be used to enforce organization-wide defaults, role hierarchy, and sharing rules. Apex will still have access to all fields and objects.
- A StandardSetController can be instantiated using either a List<sObject> or a query locator (Database.QueryLocator).
- Salesforce provides the <apex:map> component to support and display interactive maps on Visualforce pages. The map is capable of displaying multiple markers and comes with viewing controls for zooming and panning. However, the Visualforce mapping components are not available in developer edition orgs.
- DML statements can't be used in getter or constructor methods, but they can be used in setter methods.
- Page.existingPageName, where 'existingPageName' represents the name of the Visualforce page, can be used to reference a PageReference instance of a Visualforce page.
- SOQL for-loops use efficient chunking to reduce the heap size.
- Saving all results of a SOQL query in variable at once causes all data to be placed in memory instead of it being retrieved in chunks as needed.
- Using the 'transient' keyword prevents an instance variable from being transmitted as part of the view state of a Visualforce page.
- Global variables can be used to reference general information about the current user and organization on a page. Global variables must be referenced using Visualforce expression syntax to be evaluated. Example: {!$User.FirstName}.
- Transient keywords can be used in serializable APex classes, such as Visualforce custom controllers and controller extensions.
- Transient keywords can be used in apex classes that implement the batchable or schedulable interface.
- Transient keywords can be used to declare instance variables that are not persisted since transient variables are not transmitted as part of the view state. For example, after a Visualforce page refreshm only non-transient variables persist on the page since their values can be retrieved from the view state. Transient variables do not exist in the view state and their values are reset.
- Multiple controller extensions can be defined on a single page by specifying the names of the extensions in a comma-separated list.
- Lightning Message Service enables communication across the DOM by allowing LWC, Aura components, and Visualforce pages to send receive messages through a lightning message channel, which is a metadata type called LightningMessageChannel.
- A LWC component can reference the message channel by importing it via the @salesforce/messageChannel scoped module, and then specifying the channel with a "__c" suffix appended to the name of the metadata, although it is not a custom object.
- A module called "lightning/messageService" is used to access service features such as publishing, subscribing, and unsubscribing from messages on a message channel in a Lightning web component.
- LWC cannot contain Aura components, but Aura components can contain LWC.
- The JSENCODE function can be used to automatically insert escape characters before unsafe characters in js code and secure the page from Cross-Site Scripting (XSS) attacks.
- HTMLENCODE, JSINHTMLENCODE, and URLENCODE are other functions that can be used to escape potentially insecure strings on a page.
- Content Sniffing Protection is enabled by default and cannot be disabled. It prevents the execution of malicious files, such as JavaScript and CSS, as dynamic content by preventing the browser from inferring the media/MIME type from the document content.
- Content Security Policy Protection is used to mitigate the risk of cross-site scripting attacks.
- Cross-Site Request Forgery Protection protects against attacks that force an end user to execute unwanted actions in an application.
- Lightning web security is used to secure coding practices and is intended to replace lightning locker.
- @salesforce/userPermission scoped module can be used to check for he standard permissions assigned to the current user.
- @salesforce/customPermission scoped module can be used to check for custom permissions.
- @salesforce/resourceUrl scoped module is used for referencing files contained in static resources.
- Component events support two phases of component event propagation, Bubble and Capture phases. The default phase is the bubble phase.
- Bubble phase of the component event propagates the event upwards in the containment hierarchy until it reaches the root component.
- Capture phase of the component event propagates the event in a top down manner. When the source component fires the event, the root component gets to handle the event first and the propagation traverses down the containment hierarchy until it reaches the source component.
- Aura app can be created to allow the custom lightning application to have its own standalone url.
- Aura component or LWC can be added to an Aura app, but an Aura app cannot be added to another Aura app.
- Salesforce provides the 'LightningModal' class for building modal components (in lwc) that can be used to create feature-rich, reusable overlays. <lightning-modal-body> component is required.
- Lightning message service can be used to allow Visualforce pages, Aura components, and Lightning web components to communicate with one another via a dedicated channel.
- Apex has access to all objects and fields as it runs in system mode by default.
- Sharing keywords defined on the Apex class only impact record-level access. To secure object-level and field-level access in SOQL, the WITH SECURITY_ENFORCED or WITH USER_MODE clauses can be used.
- The firing of init() events starts from the innermost component and then traverses outwards the components higher in the hierarchy.
- A custom property editor is essentially a lwc that is used as a custom user interface for configuring the properties of the component or element that uses it.
- To register a custom property editor for a custom screen component, the name of the custom property editor is defined in the configuration file of the custom screen component using the 'configurationEditor' attribute.
- By default, custom property editors are only able to use manually assigned variables as input values. Exposing a public property called 'automaticOutputVariables' in the custom property editor's js controller enables it to access automatically stored values, such as the return value of a 'Get Records' element.